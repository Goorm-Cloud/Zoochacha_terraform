name: 'Terraform'

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  id-token: write

env:
  AWS_REGION: ap-northeast-2
  TF_VERSION: '1.5.7'

jobs:
  check-previous-run:
    runs-on: ubuntu-latest
    outputs:
      last-successful-job: ${{ steps.get-state.outputs.last-successful-job }}
      run-number: ${{ steps.get-run-number.outputs.run-number }}
      previous-run-status: ${{ steps.get-previous-status.outputs.previous-run-status }}
    steps:
      - name: Get Previous Run Status
        id: get-previous-status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PREVIOUS_RUN=$(gh run list --json databaseId,conclusion,status -L 2 | jq -r '.[1]')
          PREVIOUS_STATUS=$(echo $PREVIOUS_RUN | jq -r '.status')
          echo "previous-run-status=$PREVIOUS_STATUS" >> $GITHUB_OUTPUT
          echo "Previous run status: $PREVIOUS_STATUS"
      
      - name: Get Last Successful Job
        id: get-state
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ steps.get-previous-status.outputs.previous-run-status }}" = "success" ]; then
            LAST_JOB=$(gh run list --json jobs,conclusion,name -L 2 | jq -r '.[1].jobs[] | select(.conclusion=="success") | .name' | head -1)
          else
            LAST_JOB=$(gh run list --json jobs,conclusion,name -L 1 | jq -r '.[0].jobs[] | select(.conclusion=="success") | .name' | head -1)
          fi
          echo "last-successful-job=$LAST_JOB" >> $GITHUB_OUTPUT
          echo "Last successful job: $LAST_JOB"
      
      - name: Get Run Number
        id: get-run-number
        run: |
          RUN_NUMBER=$(gh run list --json databaseId -L 1 | jq -r '.[0].databaseId')
          echo "run-number=$RUN_NUMBER" >> $GITHUB_OUTPUT

  notify-failure:
    needs: [check-previous-run, dynamodb, vpc, eks, jenkins, basic-infra, log-monitoring]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        run: |
          curl -X POST ${{ secrets.DISCORD_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d "{\"content\": \"üö® **Terraform Î∞∞Ìè¨ Ïã§Ìå®**\nÏã§Ìñâ Î≤àÌò∏: #${{ needs.check-previous-run.outputs.run-number }}\nÏã§Ìå®Ìïú ÏûëÏóÖ: ${{ github.job }}\nÏÉÅÏÑ∏ ÎÇ¥Ïö©: ${{ github.event.head_commit.message }}\n\n[Ïã§Ìñâ ÏÉÅÏÑ∏ Î≥¥Í∏∞](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }})\"}"
        env:
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}

  dynamodb:
    needs: check-previous-run
    if: needs.check-previous-run.outputs.last-successful-job == null
    name: 'DynamoDB'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dynamodb
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "terraform ci test#${{ needs.check-previous-run.outputs.run-number }}"
          git push

  vpc:
    needs: [check-previous-run, dynamodb]
    if: needs.check-previous-run.outputs.last-successful-job == null || needs.check-previous-run.outputs.last-successful-job == 'DynamoDB'
    name: 'VPC'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./vpc
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "terraform ci test#${{ needs.check-previous-run.outputs.run-number }}"
          git push

  eks:
    needs: [check-previous-run, vpc]
    if: needs.check-previous-run.outputs.last-successful-job == null || needs.check-previous-run.outputs.last-successful-job == 'VPC'
    name: 'EKS'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./eks
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "terraform ci test#${{ needs.check-previous-run.outputs.run-number }}"
          git push

  jenkins:
    needs: [check-previous-run, vpc]
    if: needs.check-previous-run.outputs.last-successful-job == null || needs.check-previous-run.outputs.last-successful-job == 'VPC'
    name: 'Jenkins EC2'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./jenkins-ec2
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "terraform ci test#${{ needs.check-previous-run.outputs.run-number }}"
          git push

  basic-infra:
    needs: [check-previous-run, eks]
    if: needs.check-previous-run.outputs.last-successful-job == null || needs.check-previous-run.outputs.last-successful-job == 'EKS'
    name: 'Basic Infrastructure'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./zoochacha-basic-infra
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "terraform ci test#${{ needs.check-previous-run.outputs.run-number }}"
          git push

  log-monitoring:
    needs: [check-previous-run, eks]
    if: needs.check-previous-run.outputs.last-successful-job == null || needs.check-previous-run.outputs.last-successful-job == 'EKS'
    name: 'Log Monitoring'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./log-monitoring
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "terraform ci test#${{ needs.check-previous-run.outputs.run-number }}"
          git push 