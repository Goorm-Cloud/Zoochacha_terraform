name: 'Terraform'

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      start_from:
        description: '시작할 작업 선택'
        required: true
        default: 'dynamodb'
        type: choice
        options:
        - dynamodb
        - vpc
        - eks
        - jenkins
        - basic-infra
        - log-monitoring

permissions:
  contents: write
  pull-requests: write
  id-token: write

env:
  AWS_REGION: ap-northeast-2
  TF_VERSION: '1.5.7'

jobs:
  check-previous-run:
    runs-on: ubuntu-latest
    outputs:
      last-successful-job: ${{ steps.get-state.outputs.last-successful-job }}
      run-number: ${{ steps.get-run-number.outputs.run-number }}
      previous-run-status: ${{ steps.get-previous-status.outputs.previous-run-status }}
    steps:
      - name: Set Starting Job
        id: set-job
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "last-successful-job=$(echo ${{ github.event.inputs.start_from }} | sed 's/^/previous-/')" >> $GITHUB_OUTPUT
          else
            PREVIOUS_RUN=$(gh run list --json jobs,conclusion,name -L 2 | jq -r '.[1].jobs[] | select(.conclusion=="success") | .name' | head -1)
            echo "last-successful-job=$PREVIOUS_RUN" >> $GITHUB_OUTPUT
          fi
          echo "Last successful job: $PREVIOUS_RUN"

  notify-failure:
    needs: [check-previous-run, dynamodb, vpc, eks, jenkins, basic-infra, log-monitoring]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        run: |
          curl -X POST ${{ secrets.DISCORD_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d "{\"content\": \"🚨 **Terraform 배포 실패**\n실행 번호: #${{ needs.check-previous-run.outputs.run-number }}\n실패한 작업: ${{ github.job }}\n상세 내용: ${{ github.event.head_commit.message }}\n\n[실행 상세 보기](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }})\"}"
        env:
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}

  dynamodb:
    needs: check-previous-run
    if: needs.check-previous-run.outputs.last-successful-job == null || github.event.inputs.start_from == 'dynamodb'
    name: 'DynamoDB'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dynamodb
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan -parallelism=20
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  vpc:
    needs: [check-previous-run, dynamodb]
    if: needs.check-previous-run.outputs.last-successful-job == null || needs.check-previous-run.outputs.last-successful-job == 'DynamoDB' || github.event.inputs.start_from == 'vpc'
    name: 'VPC'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./vpc
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan -parallelism=20
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  eks:
    needs: [check-previous-run, vpc]
    if: needs.check-previous-run.outputs.last-successful-job == null || needs.check-previous-run.outputs.last-successful-job == 'VPC' || github.event.inputs.start_from == 'eks'
    name: 'EKS'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./eks
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init
      - name: Get VPC Outputs
        run: |
          cd ../vpc
          terraform init
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV
          echo "PRIVATE_SUBNET_IDS=$(terraform output -json private_subnet_ids)" >> $GITHUB_ENV
          echo "PUBLIC_SUBNET_IDS=$(terraform output -json public_subnet_ids)" >> $GITHUB_ENV
          cd ../eks
      - name: Terraform Plan
        run: |
          terraform plan -parallelism=20 \
          -var="vpc_id=${{ env.VPC_ID }}" \
          -var="private_subnet_ids=${{ env.PRIVATE_SUBNET_IDS }}" \
          -var="public_subnet_ids=${{ env.PUBLIC_SUBNET_IDS }}"
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve \
          -var="vpc_id=${{ env.VPC_ID }}" \
          -var="private_subnet_ids=${{ env.PRIVATE_SUBNET_IDS }}" \
          -var="public_subnet_ids=${{ env.PUBLIC_SUBNET_IDS }}"

  jenkins:
    needs: [check-previous-run, eks]
    if: needs.check-previous-run.outputs.last-successful-job == null || needs.check-previous-run.outputs.last-successful-job == 'EKS' || github.event.inputs.start_from == 'jenkins'
    name: 'Jenkins EC2'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./jenkins-ec2
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init
      - name: Get VPC Outputs
        run: |
          cd ../vpc
          terraform init
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV
          echo "PUBLIC_SUBNET_ID=$(terraform output -raw pub_sub1_id)" >> $GITHUB_ENV
          cd ../jenkins-ec2
      - name: Terraform Plan
        run: |
          terraform plan -parallelism=20 \
          -var="vpc_id=${{ env.VPC_ID }}" \
          -var="subnet_id=${{ env.PUBLIC_SUBNET_ID }}"
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve \
          -var="vpc_id=${{ env.VPC_ID }}" \
          -var="subnet_id=${{ env.PUBLIC_SUBNET_ID }}"

  basic-infra:
    needs: [check-previous-run, eks]
    if: needs.check-previous-run.outputs.last-successful-job == null || needs.check-previous-run.outputs.last-successful-job == 'EKS' || github.event.inputs.start_from == 'basic-infra'
    name: 'Basic Infrastructure'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./zoochacha-basic-infra
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan -parallelism=20
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  log-monitoring:
    needs: [check-previous-run, eks]
    if: needs.check-previous-run.outputs.last-successful-job == null || needs.check-previous-run.outputs.last-successful-job == 'EKS' || github.event.inputs.start_from == 'log-monitoring'
    name: 'Log Monitoring'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./log-monitoring
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan -parallelism=20
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  commit-changes:
    needs: [check-previous-run, dynamodb, vpc, eks, jenkins, basic-infra, log-monitoring]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: Commit and Push Changes
        run: |
          git add .
          git commit -m "terraform ci test#${{ needs.check-previous-run.outputs.run-number }}"
          git push
