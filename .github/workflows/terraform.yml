name: 'Terraform'

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  AWS_REGION: ap-northeast-2
  TF_VERSION: '1.5.7'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./${{ matrix.module }}

    strategy:
      matrix:
        module: [vpc, eks, jenkins-ec2, zoochacha-basic-infra, log-monitoring]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-duration-seconds: 1800
        role-session-name: GitHubActions

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        TF_INPUT: false

    - name: Import Existing Infrastructure
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # VPC
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=zoochacha-vpc" --query 'Vpcs[0].VpcId' --output text)
        if [ "$VPC_ID" != "None" ] && [ ! -f "terraform.tfstate" ]; then
          terraform import aws_vpc.this $VPC_ID
          
          # Subnets
          PUB_SUB1_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=zoochacha-pub-sub1" --query 'Subnets[0].SubnetId' --output text)
          PUB_SUB2_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=zoochacha-pub-sub2" --query 'Subnets[0].SubnetId' --output text)
          PRI_SUB1_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=zoochacha-pri-sub1" --query 'Subnets[0].SubnetId' --output text)
          PRI_SUB2_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=zoochacha-pri-sub2" --query 'Subnets[0].SubnetId' --output text)
          
          [ "$PUB_SUB1_ID" != "None" ] && terraform import aws_subnet.pub_sub1 $PUB_SUB1_ID
          [ "$PUB_SUB2_ID" != "None" ] && terraform import aws_subnet.pub_sub2 $PUB_SUB2_ID
          [ "$PRI_SUB1_ID" != "None" ] && terraform import aws_subnet.pri_sub1 $PRI_SUB1_ID
          [ "$PRI_SUB2_ID" != "None" ] && terraform import aws_subnet.pri_sub2 $PRI_SUB2_ID
        fi
        
        # EKS Cluster
        if [ -d "../eks" ]; then
          CLUSTER_NAME="zoochacha-eks-cluster"
          if aws eks describe-cluster --name $CLUSTER_NAME 2>/dev/null; then
            terraform import aws_eks_cluster.this $CLUSTER_NAME
          fi
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Manual Approval
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ secrets.GITHUB_TOKEN }}
        approvers: ${{ secrets.TERRAFORM_APPROVERS }}
        minimum-approvals: 1
        issue-title: "Manual Approval Required for Terraform Apply"
        issue-body: "Please review the Terraform plan and approve the changes."
        exclude-workflow-initiator-as-approver: false

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        TF_INPUT: false 